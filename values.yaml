# Default values for appstore.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # -- repository where image is located
  repository: containers.renci.org/helxplatform/appstore
  # -- pull policy
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  # Set to "" before release!
  tag:

fetcherImage:
  # -- repository where image is located
  repository: helxplatform/url-fetch
  # -- pull policy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

# -- credentials for a private repo
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

networkPolicyLabels: {"role": "appstore"}

podAnnotations: {}

# An empty string equates to false, anything else is true.  If debug is true the logLevel is also set to DEBUG.
debug: ""
# -- Set the log level for the application.  (DEBUG INFO WARNING ERROR CRITICAL)
logLevel: "WARNING"

updateStrategy:
  # -- 'RollingUpdate' or 'Recreate'. Must use Recreate if mounting PVCs due to multi-attach errors.
  type: Recreate

serviceAccount:
  # -- specifies whether a service account should be created
  create: true
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

securityContext:
  runAsUser: 0
  runAsGroup: 0
  fsGroup: 0

service:
  type: ClusterIP
  port: 80
  name: http

resources:
  limits:
    cpu: 500m
    memory: 1024Mi
  requests:
    cpu: 200m
    memory: 300Mi

security:
  isolatedApps: true

# -- Choose http or https for the protocol that is used by external users to access
# the appstore web service.
ACCOUNT_DEFAULT_HTTP_PROTOCOL: http

# -- Set environment variables from a file.
SET_BUILD_ENV_FROM_FILE: false

nodeSelector: {}

tolerations: []

affinity: {}

ambassador:
   # -- register appstore with ambassador flag: <True or False>
   flag: true

# -- set the theme for appstore (bdc, braini, restartr, scidas)
djangoSettings: helx
# -- Allow for a custom entrypoint command via the values file.
appstoreEntrypointArgs: "make start"

artillery:
  # -- When either smokeTest or loadTest is true, set CREATE_TEST_USERS, TEST_USERS_PATH under django settings.
  smokeTest: false
  loadTest: false
  loadDuration: 10
  loadArrivalRate: 10

# -- Various settings for helx-ui which will get expressed as env variables in container
helx_ui:
# -- REACT_APP_ANALYTICS (string) HeLx Mixpanel project analytics token
  REACT_APP_ANALYTICS: ""
# -- REACT_APP_APPSTORE_ASSET_BRANCH: (string) branchname of appstore branch
  REACT_APP_APPSTORE_ASSET_BRANCH: "master"
# -- REACT_APP_HELX_SEARCH_URL: (url)  URL of tranql
  REACT_APP_HELX_SEARCH_URL: ""
# -- REACT_APP_SEMANTIC_SEARCH_ENABLED: (boolean) Enable/Disable helx-ui search.
  REACT_APP_SEMANTIC_SEARCH_ENABLED: "false"
# -- REACT_APP_UI_BRAND_NAME: (string) defaults to the value of djangoSettings
# values: bdc, braini, eduhelx, eduhelx-chip690, eduhelx-sandbox, restartr, scidas, tracs
  REACT_APP_UI_BRAND_NAME: ""
# -- REACT_APP_WORKSPACES_ENABLED: (boolean) Enable/Disable workspaces
  REACT_APP_WORKSPACES_ENABLED: "true"

gunicorn:
  # -- Set the number of gunicorn workers.  (2*CPU)+1 is recommended.
  workers: 5

django:
  # -- create test users for load testing
  CREATE_TEST_USERS: "false"
  # -- parent directory where the users.txt would be mounted
  TEST_USERS_PATH: "/usr/src/inst-mgmt/artillery-tests/payloads"
  # -- secret file deployed on the cluster to fetch the test users
  TEST_USERS_SECRET: "test-users-secret"
  # -- user emails for oauth providers
  AUTHORIZED_USERS: ""
  # -- user emails to remove from an already-existing database
  REMOVE_AUTHORIZED_USERS: ""
  # -- Specify the git branch to use for HeLx app specifications.  When
  # declaring 'tycho.externalAppRegistryRepo' leave this as an empty string.
  DOCKSTORE_APPS_BRANCH: "v1.6.0"
  ###################################################
  APPSTORE_DJANGO_USERNAME: "admin"
  APPSTORE_DJANGO_PASSWORD: ""
  # -- show Django log in fields (true | false)
  ALLOW_DJANGO_LOGIN: ""
  # -- show SAML log in fields (true | false)
  ALLOW_SAML_LOGIN: ""
  # -- email of account to use for outgoing emails
  EMAIL_HOST_USER: ""
  # -- password of account to use for outgoing emails
  EMAIL_HOST_PASSWORD: ""
  # -- Specify URL to use for the "Image Download" link on the top part of website.
  IMAGE_DOWNLOAD_URL: ""
  # -- idle timeout for user web session
  SESSION_IDLE_TIMEOUT: 3600
  # -- list of appstore registration emails
  RECIPIENT_EMAILS: ""
  # -- should be 'live' unless you are doing some kind of development
  DEV_PHASE: "live"

oauth:
  claimName: appstore-oauth-pvc
  storageClass:
  # -- oauth providers separated by commas (google, github)
  OAUTH_PROVIDERS: ""
  GITHUB_NAME: ""
  GITHUB_KEY: ""
  GITHUB_SITES: ""
  GITHUB_CLIENT_ID: ""
  GITHUB_SECRET: ""
  GOOGLE_NAME: ""
  GOOGLE_KEY: ""
  GOOGLE_SITES: ""
  GOOGLE_CLIENT_ID: ""
  GOOGLE_SECRET: ""

saml:
  cache:
    enabled: false
    claimName: "saml-cache"
    storageSize: "20M"
    storageClass: ""
    FETCH_FILE: "/data/saml_metadata.xml"
    FETCH_INTERVAL: "60000"
    APPSTORE_DIRECTORY: "/saml"
    APPSTORE_FILE: "saml_metadata.xml"
  AUTHORITY_URL: ""
  ASSERTION_URL: ""
  ENTITY_ID: ""

irods:
  # -- enable irods support (true | false)
  enabled: false
  BRAINI_RODS: ""
  NRC_MICROSCOPY_IRODS: ""
  RODS_USERNAME: ""
  RODS_PASSWORD: ""
  IROD_COLLECTIONS: ""
  IROD_ZONE: ""
  IROD_APPROVED_USERS: ""

apps:
  DICOMGH_GOOGLE_CLIENT_ID: ""
  DATASOURCE_CONNECTION_URL: ""
  DATASOURCE_PASSWORD: ""
  FLYWAY_DATASOURCE_CONNECTION_URL: ""
  FLYWAY_DATASOURCE_PASSWORD: ""
  DATASOURCE_USERNAME: "ohdsi"
  FLYWAY_DATASOURCE_USERNAME: "ohdsi"
  # -- PUID variable in webtop specifies the UID to switch the user to after
  # initialization.
  WEBTOP_PUID: "1000"
  # -- PGID variable in webtop specifies the GID to switch the user to after
  # initialization.
  WEBTOP_PGID: "1000"
  # -- Specify email for pgAdmin user.
  PGADMIN_EMAIL: "user@domain.com"
  # -- Specify the database hostname used for pgAdmin's clients to connect to.
  # If specified this replaces 'mimic-postgresql' in the pgadmin4.db
  # configuration file.
  HELX_DB_HOSTNAME: ""

# -- Settings for default django db sqlite3 oauth pvc storage, if postgreql is not enabled
appStorage:
  storageSize: 2Gi
  storageClass:

userStorage:
  # -- Create a PVC for user's files.  If false then the PVC needs to be created
  # outside of the appstore chart.
  createPVC: true
  storageSize: 10Gi
  storageClass:
  nfs:
    createPV: false
    path:
    server:

# Add any extra environment variables not already defined in the chart.
extraEnv: {}

# -- Set to true, when using blackbalsam.
useSparkServiceAccount: false

tycho:
  # -- Application processes launched will run as this user.
  runAsUser: 0
  # -- Application processes launched will have this group permissions.
  runAsGroup: 0
  # -- Application processes launched will also be part of this supplimentary group.
  fsGroup: 0
  # -- Start the init container to take care of any needed tasks before the
  # main container is started.  This can be to create certain directories or
  # set file permissions.
  enableInitContainer: true
  # -- Init processes will run as this user.
  initRunAsUser: 0
  # -- Init processes will have this group permissions.
  initRunAsGroup: 0
  # -- Create Home and shared directories for users.
  createHomeDirs: true
  # -- directory that will be used to mount user's home directories in
  parent_dir: "/home"
  # -- Name of directory to use for a user's home directory.  If null then the
  # user's username will be used.
  subpath_dir: null
  # -- name of directory to use for shared data
  shared_dir: "shared"
  # -- Resource for Tycho init container. Defaults cpus|250m memory|250Mi
  init:
    resources:
      cpus: 250m
      memory: 250Mi
  # -- Enable/disable the external app registry file for Tycho.  Set
  # 'django.DOCKSTORE_APPS_BRANCH' to an empty string when when using an
  # external app registry.
  externalAppRegistryEnabled: false
  # -- Can be set to a git repo URL for fetching the app registry file or
  # defaults file.  Something in the form of 
  # 'https://github.com/helxplatform/helx-apps/raw'.
  externalAppRegistryRepo: "https://github.com/helxplatform/helx-apps/raw"
  # -- The branch that would be appended to 'externalAppRegistryRepo' to
  # retrieve the app registry and defaults files.  The full URL, if using the
  # externalAppRegistryRepo example for the app registry file would be 
  # 'https://github.com/helxplatform/helx-apps/raw/master/app-registry.yaml'.
  # The default value is the AppVersion of this chart prefixed with a 'v'
  # (ex. v2.0.0).
  externalAppRegistryBranch:
  externalAppRegistryAppSpecsDir: "app-specs"

global:
  # -- the name of the PVC to use for user's files
  stdnfsPvc: stdnfs
  # -- specify the id of the ambassador for Tycho-launched services.
  ambassador_id:

#############################################################################
# -- appstore database settings
db:
  name: appstore
  host: postgresql
  port: 5432

# -- postgresql settings
postgresql:
  enabled: true
  global:
    # -- postgresql credentials
    postgresql:
      auth:
        postgresPassword: "adminPass"
        database: "appstore-oauth"
        username: "renci"
        password: "renciAdmin"
  # -- postgresql labels
  primary:
    labels: {"np-label": "appstore-db"}
    podLabels: {"np-label": "appstore-db"}
  # -- postgresql logs
  audit:
    logHostname: true
    logConnections: true
  # -- postgresql persistence storage
  persistence:
    existingClaim: "appstore-postgresql-pvc"
    storageClass:
  volumePermissions:
    enabled: true
  # -- enable/disable postgresql network policy, allows traffic to and from appstore pod only.
  networkPolicyEnabled: true
